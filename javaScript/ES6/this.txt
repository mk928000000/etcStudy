## this 의 의미
1. 그냥 일반 함수에서 쓰면 window
2. 오브젝트 내의 함수(메소드)에서 쓰면 함수를 동작시키는 오브젝트
3. constructor 안에서 쓰면 constructor 로 생성되는 오브젝트
4. eventlistener 안에서 쓰면 e.currentTarget (지금 이벤트가 동작하는 곳. 다시말하면 addeventListener 가 부착된 html 요소)



## case 1. 이벤트리스너 안에서 콜백함수를 쓰면 여기서 this 는?
-> window.
-> 여기서 콜백함수는 메소드도 오브젝트도 eventlistener 도 아니고 그냥 근본없는 함수를 호출한것 뿐. 



## case 2. 오브젝트 내에서 콜백함수를 쓴다면 여기서 this 는?
오브젝트.이름들.foreach(function(){})
-> window. 
-> 여기서 콜백함수는 메소드도 오브젝트도 eventlistener 도 아니고 그냥 근본없는 함수를 호출한것 뿐. 



## 이벤트리스너/오브젝트 내의 콜백함수가 arrow function 으로 표현되면 this 는? 
- arrow function 의 특징 : 내부의 this 값을 변화시키지 않음. 외부렉시컬의 this 를 그대로 재사용.

예) 
var 오브젝트 = {
    이름들 : =['김','이','박'],
    함수 : function (){
        console.log(this);                  ----> 오브젝트 {이름들:Array(3), 함수: f}
        오브젝트.이름들.forEach(function(){         
            console.log(this)               ----> window
        }) 

        오브젝트.이름들.forEach(()=>{               
            console.log(this)               ----> this 재할당 x. 외부 렉시컬의 this 를 그대로 사용. 
                                                  오브젝트 {이름들:Array(3), 함수: f}
        }) 
    }
}