## 변수를 왜 만드나? 
- 변수는 자료를 임시저장하는 공간이다.
- var 키워드



## ES6 변수 키워드 let, const
- var 키워드를 대체해서 그대로 쓸 수 있다.

var 이름 = 'Kim';

let 이름 = 'Kim';



## 변수의 특징 선언, 할당, 범위

- var 키워드 : 재선언/재할당o , 범위는 function

- let 키워드 : 재선언x, 재할당o , 범위는 모든 {}

- const 키워드 : 재선언/재할당x , 범위는 모든 {}


    var 이름 = 'kim';
    -------선언
        ------------할당

    var 이름 = 'park';
    이름 = 'lee' ;
    -------------재할당



    const 사람 = {이름 : 'Kim'}
    사람.이름 = 'Park';          --------> 변수 안의 '값'을 변경한 것으로, 가능함.

    수정 불가능한 오브젝트를 만들려면?
    Object.freeze(사람);        ---------> 변수 안의 '값'도 수정 불가능하게함.
    사람.이름 = 'Lee' ;         ---------> 오류는 안난다. 오류나게하려면 'use strict' 모드를 켜야함.



    function 함수 () {
       var 이름 = 'kim';       ----------> functino 안에서만 존재함.
       console.log(이름);      ----------> 'kim'
       
    }

    console.log(이름)          ----------> undefined

    if(true) {
        let 이름 = 'park';
    }



## Hoisting 현상
- 변수/함수의 선언을 변수 범위 맨 위로 끌고오는 현상
- 변수는 선언문만 맨 위로 올리고 원래 코드 위치에서는 할당을 한다.
  그러나 var 와 달리 let, const 는 Hoisting 시 undefined 자동할당이 안된다.

    var 나이 = 30;  
    var 나이;
    ..
    나이 = 30;

- 함수는 선언과 할당을 모두 가지고 통째로 올라온다. function aa (){}
  그러나 var aa = function(){} 은 변수 선언부만 호이스팅이 된다. 할당은 호이스팅 되지 않는다. 




## 변수 동시에 여러개 만들기
var 나이, 주소, 연락처;



## 전역변수 
- 모든 곳에서 쓸 수 있는 변수
- 변수를 가장 바깥에 만들어두면 어디에서든 쓸 수 있다.


<script>
    var 나이 = 20;                 ----> 방법1
    window.이름 = 'kim' ;          ----> 방법2. better 권장방식.

    functin 함수() {
        console.log(나이);         ----> 20
    }
    함수();
</script>



## 지역변수
- 범위를 벗어나면 사라지는 변수




## 응옹
- 반복문을 통해 함수를 실행시키고자 할 때. 
- for문 루프가 돌 때, var 는 하나의 변수를 계속 참조하고있음. 
- let 은 {} 내에서 생성되고 소멸되므로 1회 for문 루프마다 다른 let 을 참조하고 소멸함.

// var i = 0;       와 다름없음.                                 ----> 반복문은 순식간에 돌고 i = 5 가 됨.
for(var i = 0; i < 5; i++){
    setTimeout(function(){console.log(i)}, i*1000);             ----> 5만 다섯번 찍힘.
}                                   


for (let i = 0; i < 5; i++) {                                   ----> 반복문 루프마다 let i 가 생성되어 각각 다른 i 를 참조함. 
    setTimeout(function(){console.log(i)}, i*1000);             ----> 0 1 2 3 4.
}
